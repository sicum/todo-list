{"version":3,"sources":["components/TodoList.js","components/TodoItems.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","this","props","inputElement","current","focus","className","onSubmit","addItem","type","placeholder","aria-label","aria-describedby","ref","value","currentItem","text","onChange","handleInput","id","Component","TodoItems","createTasks","item","key","data-toggle","onClick","deleteItem","listItems","entries","map","Navbar","App","React","createRef","filteredItems","state","items","filter","setState","e","target","Date","now","preventDefault","newItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAgCeA,E,6LA5BXC,KAAKC,MAAMC,aAAaC,QAAQC,U,+BAGhC,OACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,UACb,0BAAMC,SAAUN,KAAKC,MAAMM,SAC3B,yBAAKF,UAAU,oBACb,2BAAOG,KAAK,OACVH,UAAU,eACVI,YAAY,OACZC,aAAW,OACXC,mBAAiB,gBACjBC,IAAKZ,KAAKC,MAAMC,aAChBW,MAAOb,KAAKC,MAAMa,YAAYC,KAC9BC,SAAUhB,KAAKC,MAAMgB,cAEvB,yBAAKZ,UAAU,sBACb,4BAAQG,KAAK,SAASH,UAAU,4BAA4Ba,GAAG,iBAA/D,qB,GApBSC,aCqBRC,E,2MApBbC,YAAc,SAAAC,GACZ,OACE,wBACEC,IAAKD,EAAKC,IACVlB,UAAU,yCACVmB,cAAY,OACZC,QAAS,kBAAM,EAAKxB,MAAMyB,WAAWJ,EAAKC,OAEzCD,EAAKP,O,wEAKV,IACMY,EADc3B,KAAKC,MAAM2B,QACDC,IAAI7B,KAAKqB,aAEvC,OAAO,wBAAIhB,UAAU,cAAcsB,O,GAjBfR,aCcTW,E,iLAZX,OACD,kBAAC,WAAD,KACK,4BAAQzB,UAAU,oBAChB,yBAAKA,UAAU,SACb,wBAAIA,UAAU,kBAAd,oB,GANSc,aC6DNY,E,YAxDb,aAAe,IAAD,8BACZ,+CAFF7B,aAAe8B,IAAMC,YACP,EAUdP,WAAa,SAAAH,GACX,IAAMW,EAAgB,EAAKC,MAAMC,MAAMC,QAAO,SAAAf,GAC5C,OAAOA,EAAKC,MAAQA,KAEtB,EAAKe,SAAS,CACZF,MAAOF,KAfG,EAmBdjB,YAAc,SAAAsB,GACZ,IACMzB,EAAc,CAAEC,KADLwB,EAAEC,OAAO3B,MACYU,IAAKkB,KAAKC,OAChD,EAAKJ,SAAS,CACZxB,iBAvBU,EA0BdP,QAAU,SAAAgC,GACRA,EAAEI,iBACF,IAAMC,EAAU,EAAKT,MAAMrB,YAC3B,GAAqB,KAAjB8B,EAAQ7B,KAAa,CACvB,IAAMqB,EAAK,sBAAO,EAAKD,MAAMC,OAAlB,CAAyBQ,IACpC,EAAKN,SAAS,CACZF,MAAOA,EACPtB,YAAa,CAAEC,KAAM,GAAIQ,IAAK,QA/BlC,EAAKY,MAAQ,CACXC,MAAO,GACPtB,YAAa,CACXC,KAAM,GACNQ,IAAK,KANG,E,sEAsCZ,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,0BAAMlB,UAAU,eACd,6BACA,kBAAC,EAAD,CACEE,QAASP,KAAKO,QACdL,aAAcF,KAAKE,aACnBe,YAAajB,KAAKiB,YAClBH,YAAad,KAAKmC,MAAMrB,cAE1B,kBAAC,EAAD,CAAWc,QAAS5B,KAAKmC,MAAMC,MAAOV,WAAY1B,KAAK0B,mB,GAnD/CP,aCOE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.87b9ba12.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass TodoList extends Component {\n  componentDidUpdate() {\n    this.props.inputElement.current.focus()\n  }\n  render() {\n    return (\n      <div className=\"todoListMain lead\">\n        <div className=\"header\">\n          <form onSubmit={this.props.addItem}>\n          <div className=\"input-group mb-3\">\n            <input type=\"text\" \n              className=\"form-control\" \n              placeholder=\"Task\"\n              aria-label=\"Task\" \n              aria-describedby=\"button-addon2\"\n              ref={this.props.inputElement}\n              value={this.props.currentItem.text}\n              onChange={this.props.handleInput}\n            />\n            <div className=\"input-group-append\">\n              <button type=\"submit\" className=\"btn btn-outline-secondary\" id=\"button-addon2\">Add Task</button>\n            </div>\n          </div>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TodoList","import React, { Component } from 'react'\n\nclass TodoItems extends Component {\n  createTasks = item => {\n    return (\n      <li \n        key={item.key}\n        className=\"list-group-item list-group-item-action\"\n        data-toggle=\"list\"\n        onClick={() => this.props.deleteItem(item.key)}\n      >\n        {item.text}\n      </li>\n    )\n  }\n  render() {\n    const todoEntries = this.props.entries\n    const listItems = todoEntries.map(this.createTasks)\n\n    return <ul className=\"list-group\">{listItems}</ul>\n  }\n}\n\nexport default TodoItems","import React, { Component, Fragment } from 'react'\n\nclass Navbar extends Component {\n  render() {\n    return (\n\t\t\t<Fragment>\n        <header className=\"masthead mb-auto\">\n          <div className=\"inner\">\n            <h3 className=\"masthead-brand\">Todo Task</h3>\n          </div>\n        </header>\n\t\t\t</Fragment>\n    )\n\t}\n}\n\nexport default Navbar","import React, { Component, Fragment } from 'react';\nimport TodoList from './components/TodoList';\nimport TodoItems from './components/TodoItems';\nimport Navbar from './components/Navbar';\n\nclass App extends Component {\n  inputElement = React.createRef()\n  constructor() {\n    super()\n    this.state = {\n      items: [],\n      currentItem: {\n        text: '',\n        key: '',\n      },\n    }\n  }\n  deleteItem = key => {\n    const filteredItems = this.state.items.filter(item => {\n      return item.key !== key\n    })\n    this.setState({\n      items: filteredItems,\n    })\n  }\n\n  handleInput = e => {\n    const itemText = e.target.value\n    const currentItem = { text: itemText, key: Date.now() }\n    this.setState({\n      currentItem,\n    })\n  }\n  addItem = e => {\n    e.preventDefault()\n    const newItem = this.state.currentItem\n    if (newItem.text !== '') {\n      const items = [...this.state.items, newItem]\n      this.setState({\n        items: items,\n        currentItem: { text: '', key: '' },\n      })\n    }\n  }\n  render() {\n    return (\n      <Fragment>\n        <Navbar />\n        <main className=\"inner cover\">\n          <br/>\n          <TodoList\n            addItem={this.addItem}\n            inputElement={this.inputElement}\n            handleInput={this.handleInput}\n            currentItem={this.state.currentItem}\n          />\n          <TodoItems entries={this.state.items} deleteItem={this.deleteItem} />\n        </main>\n      </Fragment>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}